ALB ingress controller setup
===========================

Setting up the AWS ALB Ingress Controller (now called the AWS Load Balancer Controller) for your EKS 
cluster allows you to expose Kubernetes services via an Application Load Balancer (ALB). It‚Äôs production-grade
 and supports path/host-based routing, SSL, WAF, and more.

 ‚úÖ What You‚Äôll Set Up

    IAM role (IRSA) for the controller

    Helm installation of the AWS Load Balancer Controller

    RBAC, service account, and CRDs

    Example Ingress resource

üîß Step-by-Step Setup with Terraform
üìÅ Folder Structure Update

We'll place the Load Balancer Controller setup under:

eks-cluster-terraform/
‚îî‚îÄ‚îÄ terraform/
    ‚îú‚îÄ‚îÄ modules/
    ‚îÇ   ‚îî‚îÄ‚îÄ alb-controller/
    ‚îÇ       ‚îú‚îÄ‚îÄ main.tf
    ‚îÇ       ‚îú‚îÄ‚îÄ variables.tf
    ‚îÇ       ‚îú‚îÄ‚îÄ outputs.tf


üì¶ modules/alb-controller/main.tf

data "aws_eks_cluster" "this" {
  name = var.cluster_name
}

data "aws_eks_cluster_auth" "this" {
  name = var.cluster_name
}

data "tls_certificate" "oidc" {
  url = data.aws_eks_cluster.this.identity[0].oidc[0].issuer
}

resource "aws_iam_openid_connect_provider" "eks" {
  url             = data.aws_eks_cluster.this.identity[0].oidc[0].issuer
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.oidc.certificates[0].sha1_fingerprint]
}

data "aws_iam_policy_document" "alb_assume_role" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]
    effect  = "Allow"

    principals {
      type        = "Federated"
      identifiers = [aws_iam_openid_connect_provider.eks.arn]
    }

    condition {
      test     = "StringEquals"
      variable = "${replace(data.aws_eks_cluster.this.identity[0].oidc[0].issuer, "https://", "")}:sub"
      values   = ["system:serviceaccount:kube-system:aws-load-balancer-controller"]
    }
  }
}

resource "aws_iam_role" "alb_controller" {
  name               = "${var.cluster_name}-alb-controller"
  assume_role_policy = data.aws_iam_policy_document.alb_assume_role.json
}

resource "aws_iam_role_policy_attachment" "alb_controller" {
  role       = aws_iam_role.alb_controller.name
  policy_arn = "arn:aws:iam::aws:policy/AWSLoadBalancerControllerIAMPolicy"
}

provider "helm" {
  kubernetes {
    host                   = data.aws_eks_cluster.this.endpoint
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.this.certificate_authority[0].data)
    token                  = data.aws_eks_cluster_auth.this.token
  }
}

resource "helm_release" "alb_controller" {
  name       = "aws-load-balancer-controller"
  repository = "https://aws.github.io/eks-charts"
  chart      = "aws-load-balancer-controller"
  namespace  = "kube-system"

  set {
    name  = "clusterName"
    value = var.cluster_name
  }

  set {
    name  = "serviceAccount.create"
    value = "true"
  }

  set {
    name  = "serviceAccount.name"
    value = "aws-load-balancer-controller"
  }

  set {
    name  = "region"
    value = var.region
  }

  set {
    name  = "vpcId"
    value = var.vpc_id
  }

  set {
    name  = "serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn"
    value = aws_iam_role.alb_controller.arn
  }

  depends_on = [aws_iam_role_policy_attachment.alb_controller]
}







üì• variables.tf





variable "cluster_name" {
  description = "EKS cluster name"
  type        = string
}

variable "region" {
  description = "AWS region"
  type        = string
}

variable "vpc_id" {
  description = "VPC ID for ALB"
  type        = string
}


üîÅ Call the Module from Root main.tf


module "alb_ingress_controller" {
  source       = "./modules/alb-controller"
  cluster_name = aws_eks_cluster.main.name
  region       = var.region
  vpc_id       = aws_vpc.main.id
}


üß™ Test ALB Ingress (Post-deploy)
1. Deploy Test App + Ingress


apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-app
  labels:
    app: hello
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello
  template:
    metadata:
      labels:
        app: hello
    spec:
      containers:
      - name: hello
        image: hashicorp/http-echo
        args:
        - "-text=hello-from-alb"
        ports:
        - containerPort: 5678

---

apiVersion: v1
kind: Service
metadata:
  name: hello-service
spec:
  ports:
  - port: 80
    targetPort: 5678
  selector:
    app: hello

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hello-service
            port:
              number: 80

2. Apply Resources

kubectl apply -f hello-alb.yaml


Then watch the ingress get a DNS name:

kubectl get ingress


‚úÖ Summary
Component	Description
Helm chart (Terraform)	Deploys ALB Ingress controller to EKS
IRSA Role	Secure AWS access using IAM role for SA
Ingress annotations	Customize listener ports, schemes, SSL, etc.
Example deployment	Expose a sample app using ALB